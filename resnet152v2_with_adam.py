# -*- coding: utf-8 -*-
"""ResNet152V2 with Adam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0G_XIJOQzyAVQp2ksa2XtVQCxhcFshL
"""

# from google.colab import drive
# drive.mount('/content/drive')

import os
import numpy as np

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras import Model
from tensorflow.keras.applications.resnet_v2 import ResNet152V2
from tensorflow.keras.preprocessing.image import ImageDataGenerator

pre_trained_model = ResNet152V2(input_shape = (500, 400, 3), 
                                include_top = False, 
                                weights = 'imagenet')

for layer in pre_trained_model.layers:
  layer.trainable = False

pre_trained_model.summary()

last_layer = pre_trained_model.get_layer('post_relu')
print('last layer output shape: ', last_layer.output_shape)
last_output = last_layer.output

x = layers.Flatten()(last_output)

x = layers.Dense(512, activation= tf.nn.relu)(x)
# x = layers.Dropout(0.2)(x)

x = layers.Dense(512, activation= tf.nn.relu, kernel_regularizer= 'l2')(x)
# x = layers.Dropout(0.2)(x)

x = layers.Dense(128, activation= tf.nn.relu, kernel_regularizer= 'l2')(x)
# x = layers.Dropout(0.2)(x)

x = layers.Dense(1, activation='sigmoid')(x)           

model = Model( pre_trained_model.input, x)

# x = layers.Flatten()(last_output)

# x = layers.Dense(1024, activation='relu')(x)
# # x = layers.Dropout(0.3)(x)

# x = layers.Dense(512, activation='relu', kernel_regularizer= 'l2')(x)
# # x = layers.Dropout(0.3)(x)

# x = layers.Dense(1, activation='sigmoid')(x)           

# model = Model( pre_trained_model.input, x) 
model.summary()

model.compile(optimizer = 'Adam', 
              loss = 'binary_crossentropy', 
              metrics = ['accuracy'])

TRAINING_DIR = '/content/drive/MyDrive/Task1/NEW-TRAINING'
train_datagen = ImageDataGenerator(
      rescale=1./255,
      width_shift_range=0.15,
      height_shift_range=0.15,
      zoom_range=0.15,
      shear_range=10.0,
      horizontal_flip=True,
      brightness_range=(1.4,1.4),
      fill_mode='nearest'
    )

train_generator = train_datagen.flow_from_directory(
    TRAINING_DIR,
    target_size=(500, 400),
    # batch_size=100,
    # color_mode="grayscale",
    class_mode='binary')


VALIDATION_DIR = '/content/drive/MyDrive/Task1/NEW-TESTING/'
validation_datagen = ImageDataGenerator(rescale=1/255)
validation_generator = validation_datagen.flow_from_directory(
        VALIDATION_DIR,
        target_size=(500, 400),
        # batch_size=50,
        # color_mode="grayscale",
        class_mode='binary')

class CustomCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy')>=0.90):
      print("\nReached 90.0% accuracy so cancelling training!")
      self.model.stop_training = True

callback = tf.keras.callbacks.EarlyStopping(
    monitor='loss', 
    patience=5, 
    mode='auto', 
    baseline=None, 
    restore_best_weights=True)

history = model.fit(train_generator,
                  epochs=50,
                    validation_data=validation_generator,
                    # validation_steps=4,
                    verbose = 2,
                    callbacks = [callback]
                  )

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()
plt.show()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend(loc=0)
plt.figure()
plt.show()

VALIDATION_DATASET_DIR = '/content/drive/MyDrive/Task1/NEW-TESTING/'
validation_dataset_datagen = ImageDataGenerator(rescale=1./255)
validation_dataset_generator = validation_dataset_datagen.flow_from_directory(
        VALIDATION_DATASET_DIR,
        shuffle=False,
        target_size=(500, 400),
        # color_mode="grayscale",
        class_mode='binary')

from sklearn.metrics import f1_score, confusion_matrix, accuracy_score

y_pred = model.predict(validation_dataset_generator).round().astype(int)[:,0]

print('Validation Accuracy:')
print(accuracy_score(validation_dataset_generator.classes, y_pred))

print('\nConfusion Metrix')
cf_matrix = confusion_matrix(validation_dataset_generator.classes, y_pred)
print(cf_matrix)

print('\nF1 Score:')
print(f1_score(validation_dataset_generator.classes, y_pred))

cf_matrix = np.array(cf_matrix)

import seaborn as sns
sns.heatmap(cf_matrix, annot=True)

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ["{0:0.0f}".format(value) for value in
                cf_matrix.flatten()]
group_percentages = ["{0:.2%}".format(value) for value in
                     cf_matrix.flatten()/np.sum(cf_matrix)]
labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_matrix, annot=labels, fmt='', cmap='Blues')

